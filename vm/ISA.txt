# Audr32 ISA Specification

Audr32 (Audrey) is a 32-bit computer architecture that can be used for Language Backends and its main focus, Operating Systems.

## Instructions:

### Arithmetic

ADD                             - Addition
SUB                             - Subtraction
DIV                             - Division
IDIV                            - Signed Division
MUL                             - Multiplication

INC                             - Increment
DEC                             - Decrement
CMP                             - Compare operands
AND                             - Logical AND
SHL                             - Shift Left
SHR                             - Shift Right
XOR                             - Exclusive OR
OR                              - Logical OR
NOT                             - Logical NOT
NEG                             - Negate

TEST                            - AND comparison without affecting operands

### Stack

POP                             - Pop data from stack
PUSH                            - Push data onto stack
POPA                            - Pop all general purpose registers from the stack
PUSHA                           - Push all general purpose registers to the stack

### I/O

INX                             - Input long (four bytes, double word) from port
OUTX                            - Output long (four bytes, double word) to port

### Procedures

CALL                            - Call a procedure (push IP register to stack)
    Essentially,
    PUSH IP
    MOV IP, procedurelocation
RET                             - Return from a procedure (set IP register to value on stack)
    Essentially,
    POP IP

### Miscellaneous

JMP                             - Jump
    Essentially,
    MOV IP, location
JZ                              - Jump if zero
JNZ                             - Jump if not zero
JL                              - Jump if less than
JLE                             - Jump if less than or equal to
JG                              - Jump if greater than
JGE                             - Jump if greater than or equal to
LODSB/LODSW/LODSD               - Load byte/word/dword located at address SI into AX
LOOP                            - Loop according to CX (Undefiend Behaviour)
SETEQ                           - Set to 1 if equal, otherwise set to 0
SETNE                           - Set to 1 if not equal, otherwise set to 0
SETLT                           - Set to 1 if less than, otherwise set to 0
SETGT                           - Set to 1 if greater than, otherwise set to 0
SETLE                           - Set to 1 if less than or equal to, otherwise set to 0
SETGE                           - Set to 1 if greater than or equal to, otherwise set to 0
LEA                             - Load the address of something into a register
CLD                             - Clear direction flag (Obsolete)

MOV                             - Move data between pointers and registers among other things.

NOOP                            - Perform no operation
HALT                            - Halt operation
INT                             - Call to interrupt
 

## Registers:

A register is a value stored in the CPU and not the memory, 
 a register can be used to store any 32 bit value for operation on.
Some instructions will not take registers as arguments and rather reference specific registers to draw and set data to.

The standard registers are as follows:

AX                              - 32 bit accumulator register
BX                              - 32 bit base register
CX                              - 32 bit counter register
DX                              - 32 bit data register
SI                              - 32 bit source index register
DI                              - 32 bit destination index register
SP                              - 32 bit stack pointer register
BP                              - 32 bit base pointer register
IP                              - 32 bit instruction pointer register
R0                              - Generic 32 bit register
R1                              - Generic 32 bit register
R2                              - Generic 32 bit register
R3                              - Generic 32 bit register
R4                              - Generic 32 bit register
R5                              - Generic 32 bit register
R6                              - Generic 32 bit register
R7                              - Generic 32 bit register
R8                              - Generic 32 bit register
R9                              - Generic 32 bit register
R10                             - Generic 32 bit register
R11                             - Generic 32 bit register
R12                             - Generic 32 bit register
R13                             - Generic 32 bit register
R14                             - Generic 32 bit register
R15                             - Generic 32 bit register

## I/O Ports: (16 bit integer)

0x0010                          - Serial 1
0x0011                          - Serial 1 CMD
0x0020                          - Keyboard
0x003A                          - Interrupt Port A (Await)
0x003B                          - Interrupt Port B (Load IDT)
0x0040                          - Clock Data
0x0041                          - Clock CMD
0x0059                          - Drive CMD
0x005A                          - Drive Data A
0x005B                          - Drive Data B
0x0060                          - Power Management Controller CMD
0x0070                          - Video Data Mode

## Interrupts: (8 bit integer)

Interrupts are CPU "events" triggered by an I/O device or code.
When an interrupt is called, any currently blocking HALT instructions are resolved and the CPU will go back to normal function.
A subroutine can be called in the event of an interrupt, these are declared in an interrupt table.
An interrupt table is located in memory and will only be configured if the code makes an OUTX call to the Interrupt Controller Device (IO Port 0x003B) with the following calls:

OUTX 0x003B, 0x000000FE (Opcode for setting an interrupt table)
OUTX 0x003B, memoryaddress (`memoryaddress` being the location of the first byte of the interrupt table.)

0x01                            - Keyboard Event
0x03                            - Clock Interval Event
0x04                            - Serial Event
0x05                            - Disk Drive Services
    - R10=0x01                  - Load Sector
        - AX                    - Drive Number
        - BX                    - Destination Address
        - DX                    - Sector Number
        Returns:
            - DX                - Destination Address
    - R10=0x02                  - Load Multiple sectors
        - AX                    - Drive Number
        - BX                    - Destination Start Address
        - DX                    - Start Sector
        - CX                    - Sector Count
        Returns:
            - DX                - Destination Start Address
0x10                            - Video Services
    - R10=0x01                  - Draw character (Teletype)
        - DX                    - Character
        - BX                    - Colour (See Colour Indexes)
    - R10=0x02                  - Draw String (Not recommended for proper display)
        - SI                    - Source address
        - CX                    - Length (If zero, read until we hit NULL)
        - BX                    - Colour (See Colour Indexes)
        - R8                    - Column (X)
        - R9                    - Row (Y)
    - R10=0x03                  - Clear Screen
        - BX                    - Colour (See Colour Indexes)
    - R10=0x04                  - Draw Pixel
        - BX                    - Colour (See Colour Indexes)
    - R10=0x05                  - Set Teletype Position
        - R8                    - Column (X)
        - R9                    - Row (Y)
    - R10=0x06                  - Convert Colour Index to AARRGGBB
        - BX                    - Colour (See Colour Indexes)
        Returns:
            - DX                - AARRGGBB Colour
    - R10=0x07                  - Print Integer (Helper)
        - DX                    - Number (32-bit Unsigned)
        - BX                    - Colour (See Colour Indexes)
0x14                            - Interrupt Services
    - R10=0x01                  - Load IDT
        - DX                    - Address of IDT
0x16                            - Keyboard Services
    - R10=0x01                  - Check Keystroke
        Returns:
            - R8                - Scancode
            - R9                - ASCII Character
            - ZF                - Available, set to 1 if there is no characters available
    - R10=0x02
        Returns:
            - R8                - Scancode
            - R9                - ASCII Character
    - R10=0x03
        - AX=0x01               - Only Accept Release
            - R8                - Enable
        - AX=0x02               - Only Accept Press
            - R8                - Enable
        - AX=0x03               - Clear Buffer
0x0E                            - Disk Operation Event

## Opcodes

    PREFIX
|<=-----------------------------------=>|
0                   8                   16                  24...
+-------------------+-------------------+-------------------+
| Instruction       | Mode              | Data...           |
+-------------------+-------------------+-------------------+

"Instruction" is the operation to commence (single 8 bit integer).
"Mode" is the specific mode for this operation, this can define what will be used.
    - There are modes for most specific operations.

## Pointers

A pointer references a location in memory. A pointer may reference an 8 bit integer, 16 bit integer, or 32 bit integer.

A standard pointer structure is as follows:

0               8               16               24               32               40               48               56               64                72
+---------------+-------------------------------------------------------------------+-------------------------------------------------------------------+
| Mode          | Address (32-bit)                                                  | Offset (32-bit Signed)                                            |
+---------------+-------------------------------------------------------------------+-------------------------------------------------------------------+

A standard register pointer structure is as follows:

0               8               16               24               32               40               48
+---------------+---------------+-------------------------------------------------------------------+
| Mode          | Register      | Offset (32-bit Signed)                                            |
+---------------+---------------+-------------------------------------------------------------------+

Pointer Modes:

0x01                            - 8 bit pointer
0x02                            - 16 bit pointer
0x03                            - 32 bit pointer
0x04                            - 8 bit register pointer
0x05                            - 16 bit register pointer
0x06                            - 32 bit register pointer

(Most data that is referenced to by a pointer is dereferenced and cast to a 32 bit datatype before working with it)

Pointers are not stored within any form of data, rather the data they reference is,
 rather, pointers are merely an abstraction that allow referencing a location in data and its value. Some instructions that will modify the contents of a pointer will set the location in memory to the referenced value.
